{"name":"Peer2peer","tagline":"This is a peer to peer application like bit Napster (Written in Python)","body":"Centralised Peer to Peer System\r\n=======================================================================================================\r\n**Requirements:**\r\n\r\n- Linux system with python installed.\r\n- Python version should be equal or greater than 2.6.\r\n- You can check this just be typing python in the terminal (assuming python is already installed).\r\n\r\n*Note:* Please refer to the design document for detailed explaination of the architecture.\r\n\r\n*******************************************************************************************************\r\n\r\n**Package:**\r\n\r\nThere are two main components in the packege:\r\n\r\n1. Indexing Server (indexing_server.py)\r\n2. Peer (peer)\r\n\r\n*Indexing Server:*\r\n\r\n- Manages peer registration.\r\n- Manages file index.\r\n- Manages Client requests for searching index.\r\n- Manages Peer list in the network that are connected to the server.\r\n\r\n*Peer:*\r\n\t\r\nPeer has three sub components components:\r\n\r\n1) \tPeer (peer.py)\r\n- Serves as client for users using the peer.\r\n- Gives option for Listing and Searching files from the Central Indexing Server.\r\n- Initiates connection to Central server and registers to the network.\r\n- Starts the peer server which will serve other peers (This is Daemonized).\r\n- Starts the file system handler, which updates Central Server about the files it has.\r\n- Initates file transfer upon client request.\r\n\r\n2)  File System EventHandler (FilesystemEventHandler.py)\r\n- This is a daemon thread that is spawned by the peer thread.\r\n- This constantly monitors the allocated directory for file updates (Addtion and Deletion).\r\n- Upon any such event, it automatically updates the changes to the Central Indexing server.\r\n\r\n3) \tPeer Server\t(server.py)\r\n- This is also a daemon server, this runs on the port which the Central Server allocates.\r\n- This will listen to any peer requests and initiates file transfer.\r\n\t\t\t\r\n*******************************************************************************************************\r\n*Note:* The 'Files' folder inside directory is used as the input and outpu directory for file transfer. \r\n      So, please use this directory to place your test files.                                         \r\n*******************************************************************************************************\r\n     \r\n\r\n=======================================================================================================\r\n**Usage:**\r\n\r\nSteps to start the file transfer process:\r\n\r\n1. Start the Central Indexing Server.\r\n\r\n   > python indexing_server.py\r\n\r\n2. Depending on the requirement, open n number of terminals (here n = 3).\r\n3. Depending on the number of peers, go into the peer(x) directory using terminal (x = 1,2,3).\r\n4. Place all the initial files into the 'Files' directory.\r\n5. Launch peers inside the peer directory.\r\n \r\n   > python peer.py\r\n\r\n6. Follow the promts in the terminal.\r\n\r\n*******************************************************************************************************\r\n\r\n\r\n\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}